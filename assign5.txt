Q1.-->
function unionArrays() {
    var args = arguments,
    l = args.length,
    obj = {},
    res = [],
    i, j, k;

    while (l--) {
        k = args[l];
        i = k.length;

        while (i--) {
            j = k[i];
            if (!obj[j]) {
                obj[j] = 1;
                res.push(j);
            }
        }   
    }

    return res;
}
var unionArr = unionArrays([5, 3], [1, 2, 3, 4, 5]);
console.log(unionArr);

Q2.-->


function triplet(Array, array_size, sum)
{
	let first, last;
	Array.sort((a,b) => a-b);
	for (let i = 0; i < array_size - 2; i++) {
		first = i + 1;
		last = array_size - 1;
		while (first < last) {
			if (Array[i] + Array[first] + Array[last] == sum)
			{
			console.log("Triplet: ( " + Array[i] + ", "
				+ Array[first] + ", " + Array[last]+ " )");
				return true;
			}
			else if (Array[i] + Array[first] + Array[last] < sum)
				first++;
			else 
				last--;
		}
	}

	
	return false;
}

	let Array = [ 1, 4, 45, 6, 10, 8 ];
	let sum = 13;
	let array_size=6;
	triplet(Array, array_size, sum);

Q3.-->
function longestSub(array,N) 
{
  array.sort();
  let max = 0;
  let count = 0;

  for (let i = 0; i < N; i++) {

    if (i > 0 && (array[i] == array[i - 1] + 1)) {
      count++;

    }
    else if (i > 0 && array[i] == array[i - 1]) {
      continue;
    }
    else {
      count = 1;
    }

    max = Math.max(max, count);
            
  }

  return max;
}
let array1 = [ 2, 0, 6, 1, 5, 3, 7];
let n = array1.length;
console.log(longestSub(array1,n));
